#lang racket

(define (product term a next b)
    (if (> a b)
        1
        (*  (term a)
            (product term (next a) next b))))

(define (factorial n)
    (define (identity x) x)
    (define (inc x) (+ x 1))
    (product identity 1 inc n)
)

(factorial 5)

(define (pi precision)
    (define (even x) (+ 2 (* 2 x)))
    (define (odd x) (+ (* 2 x) 1))
    (define (inc x) (+ x 1))
    (*  4
        (/
            (*  2
                (product even 1 inc (/ (- precision 1) 2))
                (product even 1 inc (/ precision 2))
            )
            (*                
                (product odd 1 inc (/ (inc precision) 2))
                (product odd 1 inc (/ precision 2))
            )
        )
    )
)

(pi 6)
