#lang racket

(define (accumulate combiner null-value term a next b)
    (if (> a b)
        null-value
        (combiner   (term a)
                    (accumulate combiner null-value term (next a) next b))))


(define (product term a next b)
    (define (multiply x y) (* x y))
    (accumulate multiply 1 term a next b)
)

(define (sum term a next b)
    (define (add x y) (+ x y))
    (accumulate add 0 term a next b)
)

(define (identity x) x)
(define (inc x) (+ x 1))

(sum identity 0 inc 10)
